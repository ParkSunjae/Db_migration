/**
 *
 * ---- index.js
 * require('something')
 * ---
 *
 * require('index.js') -> push
 *   - require('something') -> push
 *     - // do something
 *     < pop
 *  < pop
 *
 * @type {Array}
 */
var stack = [];

function require(name, isAlias) {
  //if (name === "component-emitter") name = "emitter";
  // Try loading a package;
  if (package.packages[name]) {
    var load = package.packages[name].require();
    if (load) return load;
  }

  // Try loading a module.
  //
  // ./something
  if (name.match(/^\.\//)) {
    // Get the current module.
    var current = module.current;
    if (name.match(/\/\.\./g)) {
      console.log("Backwards /..")
    } else {
      var moduleName = name.replace(/^\.\//, '');
      // Check if the current module is within a folder.
      if (current.name.match(/\//g)) {
        // XXX: @todo
        console.log("Current module is within a folder.");
        return;
      } else {
        if (!moduleName.match(/$\.js/)) moduleName = moduleName + '.js';
        var current = stack[stack.length - 1];
        var folders = current.name.split('/');
        folders.pop();
        if (folders.length >= 1) {
          // is within a folder.
          moduleName = folders.join('/') + '/' + moduleName;
        }

        return current.package.require(moduleName);
      }
    }
  }

  throw new Error("Error loading module: " + name);
}

// Empty.
require.alias = function() {

};


/**
 *
 */

function package(name, main) {
  if (!name) throw new Error("Package defined is missing a name.");

  if (package.packages[name]) return package.packages[name];

  var instance = new Package(name, main);
  package.packages[name] = instance;
  package.current = instance;
  return instance;
}

package.packages = {};
package.current = null;
package.aliases = {};

package.require = function(name) {
  if (package.packages[name]) {
    return package.packages[name].require();
  }

  return false;
};


package.alias = function(orig, alias) {
  package.aliases[alias] = orig;
};


function Package(name, main) {
  this.name = name;
  this.modules = {};
  this.main = main || "index.js";
  this.currentModule = null;
}

Package.prototype.add = function(name, instance) {
  this.modules[name] = instance;
};

Package.prototype.require = function(name) {

  if (!name) {
    name = this.main;
  }

  if (this.modules[name]) {
    return this.modules[name].require();
  }

  return false;
};


function module(name, source) {
  var options = {
    name: name,
    source: source
  };

  if (!name || !source) throw new Error("Cannot create a module with an empty name or source input.");

  var instance = new Module(options);
  package.current.add(name, instance);
  return instance;
}

module.current = null;

function Module(options) {
  this.name = options.name;
  this.source = options.source;
  this.moduleObject = {
    exports: {}
  };
  this.package = package.current;
  this.cache = null;
}

Module.prototype.require = function() {
  console.log(this.cache, this.name);
  if (this.cache) return this.cache;
  var Compile, source = this.source,
    self = this;

  stack.push(this);
  // XXX: Add //@ sourceURL= tag
  module.current = this;
  Compile = function(exports, require, module, __filename, __dirname) {

    try {
      eval(decodeURI(source));
      stack.pop();
    } catch (e) {
      throw e;
    }

    if (module.exports !== {}) {
      return module.exports;
    } else {
      return exports;
    }

  };

  return this.cache = Compile({}, require, this.moduleObject, this.name, this.package.name + "/" + this.name.replace(/[^\/]+$/g, ''));
};